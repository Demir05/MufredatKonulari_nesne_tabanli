# ------------------------------------------------------------------------
# ğŸ“˜ KONU: Python'da Ä°simlendirme KonvansiyonlarÄ± ve Miras ile Koruma MekanizmasÄ±
# ------------------------------------------------------------------------

# Python'da deÄŸiÅŸken ve fonksiyon isimleri yalnÄ±zca isim deÄŸil; bazÄ± yazÄ±m ÅŸekilleri
# Ã¶zel anlamlar taÅŸÄ±r. Bu kurallar genelde bir "konvansiyon" (gelenek) olarak iÅŸler,
# ama bazÄ± durumlarda Python dilinin kendisi bu isimleri farklÄ± yorumlar (Ã¶rneÄŸin: __x).

# ------------------------------------------------------------------------
# ğŸ§© 1. _tek_altÃ§izgi (Ã¶rnek: _x)
# ------------------------------------------------------------------------

# Bu kullanÄ±m bir deÄŸiÅŸkenin veya metodun "iÃ§ kullanÄ±m" amaÃ§lÄ± olduÄŸunu belirtir.
# Yani bir API, sÄ±nÄ±f ya da modÃ¼l geliÅŸtirirken ÅŸu mesajÄ± verir:
# "Bu Ã¶znitelik iÃ§ iÅŸ mantÄ±ÄŸÄ± iÃ§in yazÄ±lmÄ±ÅŸtÄ±r, dÄ±ÅŸarÄ±dan kullanÄ±lmasÄ± Ã¶nerilmez."

# Bu, yalnÄ±zca bir konvansiyondur, teknik olarak herhangi bir engel koymaz.
# Python'da her ÅŸeye eriÅŸebilirsin; bu sadece bir uyarÄ±dÄ±r.

# Ã–rnek:
class A:
    def __init__(self):
        self._secret = "Bu sadece iÃ§ kullanÄ±m iÃ§indir"

a = A()
print(a._secret)  # EriÅŸebilirsin, ama eriÅŸmemen beklenir.

# ------------------------------------------------------------------------
# ğŸ§© 2. __Ã§ift_altÃ§izgi (Ã¶rnek: __x)
# ------------------------------------------------------------------------

# Bu kullanÄ±m gerÃ§ek bir davranÄ±ÅŸ farkÄ± yaratÄ±r.
# Python bu tÃ¼r isimleri sÄ±nÄ±f adÄ±na gÃ¶re "name mangling" adÄ± verilen
# bir iÅŸlemle otomatik olarak yeniden adlandÄ±rÄ±r. bu iÅŸlem varible adÄ±nÄ± deÄŸiÅŸtirmekten ibarettir

# Bu sayede:
# - AynÄ± isimli deÄŸiÅŸkenlerin alt sÄ±nÄ±flarda Ã¼st sÄ±nÄ±fÄ± ezmesi engellenir.
# - SÄ±nÄ±f iÃ§i gizliliÄŸe yÃ¶nelik basit bir koruma saÄŸlanÄ±r (gerÃ§ek private deÄŸil).
# - Python '_SÄ±nÄ±fAdÄ±__isim' ÅŸeklinde iÃ§eriÄŸi yeniden adlandÄ±rÄ±r.

# Ã–rnek:
class B:
    def __init__(self):
        self.__data = 42  # Bu aslÄ±nda self._B__data olur artÄ±k __data adÄ±nda bir deÄŸiÅŸken olmaz bu isim deÄŸiÅŸir dolasÄ±yla ulaÅŸamayÄ±z.

b = B()
# print(b.__data)       # AttributeError: 'B' object has no attribute '__data'
print(b._B__data)        # 42  â†’ name mangling ile saklanmÄ±ÅŸ

# ------------------------------------------------------------------------
# ğŸ§¬ 3. Miras Durumunda __x Koruma MekanizmasÄ±
# ------------------------------------------------------------------------

# EÄŸer bir sÄ±nÄ±fta __isim ÅŸeklinde bir alan tanÄ±mlarsan,
# bu alan alt sÄ±nÄ±flarda aynÄ± isimle tanÄ±mlansa bile Ã§akÄ±ÅŸmaz.
# Ã‡Ã¼nkÃ¼ Python her sÄ±nÄ±fa Ã¶zgÃ¼ olarak __isim adÄ±nÄ± yeniden adlandÄ±rÄ±r.

# Ã–rnek:
class Base:
    def __init__(self):
        self.__value = 100  # self._Base__value
    def show(self):
        print("Base:", self.__value)

class Sub(Base):
    def __init__(self):
        super().__init__()
        self.__value = 999  # self._Sub__value

    def show(self):
        print("Sub:", self.__value)

s = Sub()
s.show()           # Sub: 999
super(Sub, s).show()  # Base: 100

# Burada alt sÄ±nÄ±fÄ±n __value'si, Ã¼st sÄ±nÄ±fÄ±n __value'sini ezmemiÅŸtir.
# Ã‡Ã¼nkÃ¼ Python bunlarÄ±:
# - self._Base__value
# - self._Sub__value
# ÅŸeklinde ayrÄ± saklamÄ±ÅŸtÄ±r.

# Bu, miraslÄ± yapÄ±larda "kapsÃ¼lleme" (encapsulation) saÄŸlar.
# Python'da private yoktur ama __ ile bu davranÄ±ÅŸ emÃ¼le edilebilir.

# ------------------------------------------------------------------------
# ğŸ§ª NOT: __x ile gizlenen alanlara hÃ¢lÃ¢ eriÅŸebilirsin
# ------------------------------------------------------------------------

# Python'da "koruma" bir yasak deÄŸil, bir engeldir.
# EriÅŸebilirsin ama Ã¶zellikle yapman gerekir:

print(s._Base__value)  # 100
print(s._Sub__value)   # 999

# ------------------------------------------------------------------------
# ğŸ§  4. __x__ (magic methods) â†’ FarklÄ± Bir Kategori
# ------------------------------------------------------------------------

# EÄŸer isim hem baÅŸÄ±nda hem sonunda Ã§ift alt Ã§izgiyle yazÄ±lmÄ±ÅŸsa (__init__, __call__, __str__),
# bu Ã¶zel/metaprogramlama amaÃ§lÄ± Python'a ait isimlerdir.

# Bunlar Python dili tarafÄ±ndan tanÄ±nÄ±r ve otomatik olarak Ã§aÄŸrÄ±lÄ±r.

# Ã–rnek:
class MyClass:
    def __str__(self):
        return "Ben bir nesneyim"

print(str(MyClass()))  # __str__ otomatik olarak Ã§alÄ±ÅŸÄ±r

# Bu isimleri kullanma! Yeniden tanÄ±mlayabilirsin (override),
# ama kendi isimlerini __x__ ÅŸeklinde yazma â€” Python gelecekte o ismi kullanabilir.

# ------------------------------------------------------------------------
# ğŸ§¾ 5. self, cls, *args, **kwargs â€” Ne Ä°ÅŸe Yarar?
# ------------------------------------------------------------------------

# self â†’ SÄ±nÄ±f iÃ§indeki Ã¶rneÄŸe (instance) eriÅŸmek iÃ§in
# cls â†’ SÄ±nÄ±f metodlarÄ±nda sÄ±nÄ±f nesnesine eriÅŸmek iÃ§in
# *args â†’ Fazladan pozisyonel argÃ¼manlarÄ± almak iÃ§in (tuple olarak)
# **kwargs â†’ Fazladan keyword argÃ¼manlarÄ± almak iÃ§in (dict olarak)

# Bunlar zorunlu isimler deÄŸildir ama Python topluluÄŸunun kabul ettiÄŸi standartlardÄ±r.

# ------------------------------------------------------------------------
# ğŸ“Œ Ã–zet:
# ------------------------------------------------------------------------

# _x        â†’ sadece konvansiyonel gizlilik
# __x       â†’ ad Ã§akÄ±ÅŸmasÄ±nÄ± Ã¶nleyen name mangling, kapsÃ¼lleme saÄŸlar
# __x__     â†’ Python'un Ã¶zel sistem fonksiyonlarÄ± (magic methods)
# self/cls  â†’ instance/sÄ±nÄ±f baÄŸlamÄ± iÃ§in kullanÄ±lan parametreler
# *args, **kwargs â†’ esnek fonksiyon tanÄ±mlarÄ± iÃ§in

# Miras durumlarÄ±nda Ã¶zellikle __x kullanÄ±mÄ±, alt sÄ±nÄ±fÄ±n Ã¼st sÄ±nÄ±f verisini
# yanlÄ±ÅŸlÄ±kla ezmesini Ã¶nlediÄŸi iÃ§in Ã¶nemlidir. Bu sayede Python'da yapay
# bir "private" eriÅŸim katmanÄ± oluÅŸturulmuÅŸ olur.

# GerÃ§ek gizlilik olmasa da Python felsefesi ÅŸudur:
# "Engellemem ama niyet belli ederim" (we are all consenting adults here)

class A:
    _s = "31"
    def __init__(self):
        self.__ID = 11111
    def give(self):
        return self.__ID

class B(A):
    def __init__(self,ID):
        super().__init__()
        self.ID = ID


b = B(31)

print(b.give())

print(b._s)





