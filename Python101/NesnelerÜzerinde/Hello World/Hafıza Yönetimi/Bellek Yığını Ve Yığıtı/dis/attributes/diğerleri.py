import dis

# ğŸ§© dis.opname
# ------------------------------------------------------------
# TÃ¼m opcodeâ€™larÄ±n isimlerini iÃ§eren bir liste.
# Her indeks, bir opcodeâ€™un sayÄ±sal deÄŸerini temsil eder.
# Bu liste sayesinde bytecode Ã§Ä±ktÄ±sÄ±ndaki sayÄ±sal opcodeâ€™larÄ± okunabilir hale getirebiliriz.
# Genellikle dis.get_instructions() veya dis.Bytecode() ile elde edilen opcode deÄŸerlerini Ã§Ã¶zÃ¼mlemek iÃ§in kullanÄ±lÄ±r.
# Ã–rneÄŸin: dis.opname[100] â†’ 'LOAD_CONST'
print(dis.opname[100])  # Sabit deÄŸer yÃ¼kleme komutu

# ğŸ§© dis.opmap
# ------------------------------------------------------------
# Opcode isimlerini sayÄ±sal bytecode deÄŸerlerine eÅŸleyen bir sÃ¶zlÃ¼k.
# dis.opnameâ€™in tersidir: burada isimden sayÄ±ya geÃ§ilir.
# Ã–zellikle opcode filtreleme, karÅŸÄ±laÅŸtÄ±rma ve Ã¶zel bytecode Ã¼retimi iÃ§in kullanÄ±lÄ±r.
# Ã–rneÄŸin: dis.opmap['RETURN_VALUE'] â†’ 83
print(dis.opmap['LOAD_FAST'])  # Yerel deÄŸiÅŸkeni yÃ¼kleme komutu

# ğŸ§© dis.COMPILER_FLAG_NAMES
# ------------------------------------------------------------
# Derleyici bayraklarÄ±nÄ±n sayÄ±sal deÄŸerlerini aÃ§Ä±klayan bir sÃ¶zlÃ¼k.
# Python derleyicisi bazÄ± fonksiyonlara Ã¶zel bayraklar ekler: generator, async, nested gibi.
# Bu bayraklar kod nesnesinin co_flags alanÄ±nda tutulur.
# Ã–rneÄŸin: dis.COMPILER_FLAG_NAMES[64] â†’ 'CO_GENERATOR'
print(dis.COMPILER_FLAG_NAMES[64])  # Generator fonksiyon bayraÄŸÄ±

# ğŸ§© dis.hasconst
# ------------------------------------------------------------
# Sabit deÄŸerle Ã§alÄ±ÅŸan opcodeâ€™larÄ±n listesi.
# Bu opcodeâ€™lar genellikle co_consts tablosuyla etkileÅŸim kurar.
# Sabit yÃ¼kleme, karÅŸÄ±laÅŸtÄ±rma, sabit dÃ¶nÃ¼ÅŸ gibi iÅŸlemleri iÃ§erir.
# Ã–rneÄŸin: LOAD_CONST, RETURN_CONST
print(100 in dis.hasconst)  # True â†’ LOAD_CONST sabit kullanÄ±yor

# ğŸ§© dis.hasname
# ------------------------------------------------------------
# Ä°sim tablosuna eriÅŸen opcodeâ€™larÄ±n listesi.
# co_names Ã¼zerinden Ã§alÄ±ÅŸan komutlarÄ± tanÄ±mak iÃ§in kullanÄ±lÄ±r.
# Global isimler, fonksiyonlar, modÃ¼l dÃ¼zeyindeki deÄŸiÅŸkenler bu tabloya girer.
# Ã–rneÄŸin: LOAD_NAME, STORE_NAME, DELETE_NAME
print(dis.opmap['LOAD_NAME'] in dis.hasname)  # True â†’ isimle Ã§alÄ±ÅŸÄ±yor

# ğŸ§© dis.haslocal
# ------------------------------------------------------------
# Yerel deÄŸiÅŸkenlerle Ã§alÄ±ÅŸan opcodeâ€™larÄ±n listesi.
# co_varnames Ã¼zerinden iÅŸlem yapan komutlarÄ± ayÄ±rt etmek iÃ§in kullanÄ±lÄ±r.
# Fonksiyon iÃ§indeki deÄŸiÅŸkenler burada tutulur.
# Ã–rneÄŸin: LOAD_FAST, STORE_FAST
print(dis.opmap['LOAD_FAST'] in dis.haslocal)  # True â†’ yerel deÄŸiÅŸkenle Ã§alÄ±ÅŸÄ±yor

# ğŸ§© dis.hasjrel & dis.hasjabs
# ------------------------------------------------------------
# Atlama (jump) komutlarÄ±nÄ± sÄ±nÄ±flandÄ±rÄ±r:
# - hasjrel: gÃ¶reli atlama (offsetâ€™e gÃ¶re)
# - hasjabs: mutlak atlama (doÄŸrudan hedef adres)
# DÃ¶ngÃ¼, koÅŸul ve hata yakalama bloklarÄ±nda kullanÄ±lÄ±r.
# Ã–rneÄŸin: FOR_ITER, JUMP_FORWARD, JUMP_ABSOLUTE
print(dis.opmap['FOR_ITER'] in dis.hasjrel)  # True â†’ dÃ¶ngÃ¼ adÄ±mÄ± gÃ¶reli atlama iÃ§eriyor

# ğŸ§© dis.hascompare
# ------------------------------------------------------------
# KarÅŸÄ±laÅŸtÄ±rma yapan opcodeâ€™larÄ±n listesi.
# KoÅŸul ifadeleri ve boolean mantÄ±k iÅŸlemlerini analiz etmek iÃ§in kullanÄ±lÄ±r.
# Ã–rneÄŸin: COMPARE_OP â†’ ==, <, > gibi iÅŸlemler
print(dis.opmap['COMPARE_OP'] in dis.hascompare)  # True â†’ karÅŸÄ±laÅŸtÄ±rma komutu


# ğŸ§© dis.Instruction
# ------------------------------------------------------------
# dis.get_instructions() Ã§Ä±ktÄ±sÄ±ndaki her satÄ±rÄ± temsil eden veri yapÄ±sÄ±.
# Ã–zellikleri:
# - opname: komutun adÄ± (Ã¶rneÄŸin 'LOAD_FAST')
# - opcode: sayÄ±sal deÄŸeri (Ã¶rneÄŸin 124)
# - arg: argÃ¼man indeksi (Ã¶rneÄŸin 0)
# - argval: argÃ¼manÄ±n gerÃ§ek deÄŸeri (Ã¶rneÄŸin 'x')
# - offset: bytecode iÃ§indeki konumu
# - starts_line: kaynak kod satÄ±rÄ±
# - is_jump_target: atlama hedefi mi?
for instr in dis.get_instructions(Ã¶rnek):
    print(instr.opname, instr.argval, instr.offset)

# ğŸ§© dis.show_code(obj)
# ------------------------------------------------------------
# Hem kod nesnesinin yapÄ±sÄ±nÄ± hem de bytecodeâ€™unu birlikte gÃ¶sterir.
# Ã–zellikle REPL veya terminalde hÄ±zlÄ± analiz iÃ§in kullanÄ±lÄ±r.
# Kodun argÃ¼manlarÄ±, sabitleri, isimleri ve bytecodeâ€™u tek ekranda gÃ¶rÃ¼nÃ¼r.
dis.show_code(Ã¶rnek)

# ğŸ§© dis.code_info(obj)
# ------------------------------------------------------------
# Kod nesnesi hakkÄ±nda Ã¶zet bilgi verir.
# ArgÃ¼man sayÄ±sÄ±, deÄŸiÅŸkenler, sabitler, isimler gibi meta verileri iÃ§erir.
# Ã–zellikle kod nesnesinin yapÄ±sÄ±nÄ± anlamak iÃ§in kullanÄ±lÄ±r.
print(dis.code_info(Ã¶rnek))
