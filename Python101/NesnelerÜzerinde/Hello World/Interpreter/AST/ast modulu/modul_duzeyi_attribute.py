# ===============================================================
# ğŸ“˜ PYTHON `ast` MODÃœLÃœ â€” MODÃœL DÃœZEYÄ° ATTRIBUTE & FONKSÄ°YONLAR
# ===============================================================
# ğŸ”¹ Bu dosya, ast modÃ¼lÃ¼nde pratikte en Ã§ok kullanÄ±lan fonksiyonlarÄ±n
#     tanÄ±mÄ±nÄ±, imzasÄ±nÄ±, kullanÄ±m alanÄ±nÄ± ve dikkat edilmesi gereken noktalarÄ± iÃ§erir.
# ğŸ”¹ NodeVisitor, NodeTransformer, AST gibi sÄ±nÄ±flar ayrÄ± ele alÄ±ndÄ±;
#     burada sadece "modÃ¼l dÃ¼zeyi fonksiyonlar" var.
# ğŸ”¹ Referans: https://docs.python.org/3/library/ast.html

import ast

# ---------------------------------------------------------------
# âœ… parse
# ---------------------------------------------------------------
# ğŸ”¹ Kaynak kodu (string) AST aÄŸacÄ±na dÃ¶nÃ¼ÅŸtÃ¼rÃ¼r.
# ğŸ”¹ Ä°mza: ast.parse(source, filename="<unknown>", mode="exec", type_comments=False, feature_version=None)
# ğŸ”¹ KullanÄ±m alanÄ±:
#     - Bir Python kodunu parse ederek AST Ã¼zerinde analiz yapmak
#     - Refactoring ve transpiler yazmak
# ğŸ”¹ Dikkat:
#     - "mode" parametresi "exec", "eval" veya "single" olabilir.
#       â€¢ exec â†’ script/multi-line
#       â€¢ eval â†’ tek bir ifade
#       â€¢ single â†’ tek satÄ±rlÄ±k interaktif ifade
tree = ast.parse("x = 1 + 2")
print(type(tree))  # <class 'ast.Module'>


# ---------------------------------------------------------------
# âœ… dump
# ---------------------------------------------------------------
# ğŸ”¹ AST nesnesini string olarak "debug friendly" biÃ§imde dÃ¶ndÃ¼rÃ¼r.
# ğŸ”¹ Ä°mza: ast.dump(node, annotate_fields=True, include_attributes=False, indent=None)
# ğŸ”¹ KullanÄ±m alanÄ±:
#     - ASTâ€™yi okunabilir biÃ§imde gÃ¶rmek
#     - Debugging ve eÄŸitim amaÃ§lÄ±
# ğŸ”¹ Dikkat:
#     - include_attributes=True dersek lineno/col_offset gibi metadata da gÃ¶rÃ¼nÃ¼r.
print(ast.dump(tree, indent=4))


# ---------------------------------------------------------------
# âœ… unparse (Python 3.9+)
# ---------------------------------------------------------------
# ğŸ”¹ ASTâ€™yi tekrar Python kaynak koduna dÃ¶nÃ¼ÅŸtÃ¼rÃ¼r.
# ğŸ”¹ Ä°mza: ast.unparse(node)
# ğŸ”¹ KullanÄ±m alanÄ±:
#     - AST Ã¼zerinde yapÄ±lan deÄŸiÅŸiklikleri tekrar kaynak koda dÃ¶kmek
#     - Kod dÃ¶nÃ¼ÅŸtÃ¼rÃ¼cÃ¼ / transpiler yazmak
# ğŸ”¹ Dikkat:
#     - Yorum satÄ±rlarÄ±, whitespace, format gibi gÃ¶rsel detaylar korunmaz.
print(ast.unparse(tree))  # "x = 1 + 2"


# ---------------------------------------------------------------
# âœ… walk
# ---------------------------------------------------------------
# ğŸ”¹ Bir AST aÄŸacÄ±ndaki tÃ¼m nodeâ€™larÄ± generator olarak dolaÅŸÄ±r (depth-first).
# ğŸ”¹ Ä°mza: ast.walk(node)
# ğŸ”¹ KullanÄ±m alanÄ±:
#     - Bir ASTâ€™deki tÃ¼m nodeâ€™larÄ± dÃ¼z bir liste halinde taramak
#     - Filtreleme ile "tÃ¼m FunctionDef nodeâ€™larÄ±nÄ± bul" gibi sorgular
for node in ast.walk(tree):
    print(type(node).__name__)


# ---------------------------------------------------------------
# âœ… iter_child_nodes
# ---------------------------------------------------------------
# ğŸ”¹ Bir nodeâ€™un doÄŸrudan alt nodeâ€™larÄ±nÄ± iterasyonla dÃ¶ner.
# ğŸ”¹ Ä°mza: ast.iter_child_nodes(node)
# ğŸ”¹ KullanÄ±m alanÄ±:
#     - YalnÄ±zca immediate children Ã¼zerinde gezinmek
#     - walk kadar derine gitmez â†’ daha kontrollÃ¼ traversal
for child in ast.iter_child_nodes(tree):
    print("Child:", type(child).__name__)


# ---------------------------------------------------------------
# âœ… fix_missing_locations
# ---------------------------------------------------------------
# ğŸ”¹ AST nodeâ€™larÄ±nÄ±n eksik lineno/col_offset bilgilerini doldurur.
# ğŸ”¹ Ä°mza: ast.fix_missing_locations(node)
# ğŸ”¹ KullanÄ±m alanÄ±:
#     - AST Ã¼zerinde deÄŸiÅŸiklik yaptÄ±ysan ve compile() edeceksen
#     - Metadata eksikse hata almamak iÃ§in
# ğŸ”¹ Dikkat:
#     - Konum bilgisi olmayan nodeâ€™lara en yakÄ±n Ã¼st nodeâ€™un konumunu kopyalar.
tree_fixed = ast.fix_missing_locations(tree)


# ---------------------------------------------------------------
# âœ… increment_lineno
# ---------------------------------------------------------------
# ğŸ”¹ Nodeâ€™larÄ±n satÄ±r numaralarÄ±nÄ± belli bir offset kadar artÄ±rÄ±r.
# ğŸ”¹ Ä°mza: ast.increment_lineno(node, n=1)
# ğŸ”¹ KullanÄ±m alanÄ±:
#     - Bir nodeâ€™u baÅŸka bir dosyadan/konumdan taÅŸÄ±yorsan satÄ±r numaralarÄ±nÄ± kaydÄ±rmak
# ğŸ”¹ Dikkat:
#     - Orijinal metadata Ã¼zerine yazÄ±lÄ±r.
tree_shifted = ast.increment_lineno(tree, n=10)


# ---------------------------------------------------------------
# âœ… copy_location
# ---------------------------------------------------------------
# ğŸ”¹ Bir nodeâ€™a baÅŸka bir nodeâ€™un konum bilgilerini (lineno, col_offset, end_lineno, end_col_offset) kopyalar.
# ğŸ”¹ Ä°mza: ast.copy_location(new_node, old_node)
# ğŸ”¹ KullanÄ±m alanÄ±:
#     - Yeni Ã¼retilmiÅŸ bir nodeâ€™u compile edilebilir hale getirmek iÃ§in
# ğŸ”¹ Dikkat:
#     - Metadata doÄŸru taÅŸÄ±nmazsa hata mesajlarÄ± yanlÄ±ÅŸ satÄ±rda Ã§Ä±kar.
binop = tree.body[0].value
new_node = ast.Constant(value=99)
new_node = ast.copy_location(new_node, binop)


# ---------------------------------------------------------------
# âœ… get_docstring
# ---------------------------------------------------------------
# ğŸ”¹ Bir sÄ±nÄ±f, fonksiyon veya modÃ¼lÃ¼n docstringâ€™ini dÃ¶ner.
# ğŸ”¹ Ä°mza: ast.get_docstring(node, clean=True)
# ğŸ”¹ KullanÄ±m alanÄ±:
#     - AST Ã¼zerinden docstring Ã§Ä±karmak
#     - Otomatik dokÃ¼mantasyon araÃ§larÄ±
# ğŸ”¹ Dikkat:
#     - clean=True â†’ common indentation temizlenir
code = '''\
def foo():
    """Benim docstring"""
    return 1
'''
tree = ast.parse(code)
func = tree.body[0]
print(ast.get_docstring(func))  # "Benim docstring"


# ---------------------------------------------------------------
# âœ… literal_eval
# ---------------------------------------------------------------
# ğŸ”¹ Sadece literal veri yapÄ±larÄ± iÃ§eren bir ifadeyi gÃ¼venli ÅŸekilde deÄŸerlendirir.
# ğŸ”¹ Ä°mza: ast.literal_eval(node_or_string)
# ğŸ”¹ KullanÄ±m alanÄ±:
#     - JSON benzeri string â†’ Python objesine Ã§evirme
#     - GÃ¼venlik amacÄ±yla eval yerine kullanÄ±labilir
# ğŸ”¹ Dikkat:
#     - YalnÄ±zca str, bytes, numbers, tuples, lists, dicts, sets, booleans, None izinlidir.
print(ast.literal_eval("[1, 2, 3]"))  # [1, 2, 3]


# ===============================================================
# âœ… Ã–zet
# ===============================================================
# - parse â†’ string koddan AST
# - dump â†’ ASTâ€™yi string olarak gÃ¶r
# - unparse â†’ AST â†’ kaynak kod
# - walk â†’ tÃ¼m nodeâ€™larÄ± dolaÅŸ
# - iter_child_nodes â†’ sadece alt nodeâ€™larÄ± dolaÅŸ
# - fix_missing_locations â†’ eksik lineno/col bilgilerini doldur
# - increment_lineno â†’ satÄ±r numaralarÄ±nÄ± kaydÄ±r
# - copy_location â†’ nodeâ€™a baÅŸka nodeâ€™un metadataâ€™sÄ±nÄ± kopyala
# - get_docstring â†’ docstring Ã§ek
# - literal_eval â†’ gÃ¼venli literal deÄŸerlendirme
