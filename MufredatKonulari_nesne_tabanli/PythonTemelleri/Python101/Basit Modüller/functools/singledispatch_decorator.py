# üìò @singledispatch ‚Äî S√ñZEL TANIM
# -------------------------------------
# `@singledispatch`, Python'da bir fonksiyonu "generic function" haline getirir.
# Yani: aynƒ± isimdeki bir fonksiyon, √ßaƒüƒ±rƒ±lan arg√ºmanƒ±n t√ºr√ºne g√∂re farklƒ± ≈üekilde √ßalƒ±≈üabilir.
# Bu yapƒ±, 'type-based polymorphism' saƒülar.
# Fonksiyonun davranƒ±≈üƒ±, sadece **ilk arg√ºmanƒ±n t√ºr√ºne g√∂re** belirlenir.
# Eƒüer belirli bir t√ºr i√ßin √∂zel bir versiyon tanƒ±mlanmazsa, varsayƒ±lan (decorated) versiyon √ßalƒ±≈üƒ±r.
import functools




# -------------------------------------
# ‚öôÔ∏è √áALI≈ûMA MANTIƒûI (adƒ±m adƒ±m):
# 1) `@singledispatch` fonksiyonu sarar ve bir dispatcher nesnesi d√∂ner.
# 2) Bu dispatcher, `.register(cls)(func)` ile yeni t√ºrleri kaydeder.
# 3) `dispatcher(obj)` √ßaƒürƒ±ldƒ±ƒüƒ±nda:
#    - obj'nin t√ºr√º kontrol edilir.
#    - En uygun (doƒürudan ya da MRO zincirinde en yakƒ±n) kayƒ±tlƒ± t√ºr aranƒ±r.
#    - O t√ºre baƒülƒ± fonksiyon √ßaƒürƒ±lƒ±r.
#    - Eƒüer t√ºr kayƒ±tlƒ± deƒüilse, varsayƒ±lan decorated fonksiyon √ßalƒ±≈ütƒ±rƒ±lƒ±r.

# -------------------------------------
# üß© ATTRIBUTE'LARI / METOTLARI:
# dispatcher.register(cls)(func) :
#     - cls t√ºr√ºne √∂zel fonksiyon tanƒ±mlar. cls bir class (int, str, list vs.) olabilir.
#     - func arg√ºman isimleri √∂nemli deƒüildir, √ß√ºnk√º dispatcher t√ºrden e≈üle≈ütirir.
#     - Aynƒ± dispatcher‚Äôa farklƒ± t√ºrler i√ßin farklƒ± fonksiyonlar tanƒ±mlayabilirsin.
#
# dispatcher.dispatch(cls) :
#     - Belirtilen t√ºr i√ßin hangi fonksiyonun √ßalƒ±≈ütƒ±rƒ±lacaƒüƒ±nƒ± d√∂ner (fonksiyon objesi).
#     - Bu, fonksiyonu ger√ßekten √ßalƒ±≈ütƒ±rmaz.
#
# dispatcher.registry :
#     - T√ºm kayƒ±tlƒ± t√ºr-fonksiy on e≈üle≈ümelerini i√ßeren bir s√∂zl√ºk (mappingproxy).
#     - {type: function}
#
# dispatcher.__wrapped__ :
#     - Orijinal (dekorat√∂r uygulanmamƒ±≈ü) fonksiyonun kendisini d√∂ner.
#
# dispatcher.__annotations__, __doc__ :
#     - Tanƒ±mlƒ±ysa, orijinal fonksiyonun docstring'i ve t√ºr ipu√ßlarƒ±dƒ±r.

# -------------------------------------
# üéØ Nerede Kullanƒ±lƒ±r?
# - Farklƒ± veri tiplerinde aynƒ± fonksiyon adƒ±yla ama farklƒ± i≈ülem yapƒ±lmak istenirse.
# - JSON serile≈ütirme, √∂zel string temsilleri, kontrol akƒ±≈ülarƒ± vb.
# - ƒ∞f-elif-else zincirlerinden ka√ßƒ±nmak i√ßin.
# - API tasarƒ±mlarƒ±nda temiz geni≈ületilebilirlik i√ßin.

# -------------------------------------
# üö´ Nerede KULLANILMAZ?
# - ƒ∞lk parametresi olmayan fonksiyonlarda (√ß√ºnk√º type kontrol√º i√ßin 1 parametre gerekir)
# - Sƒ±nƒ±f metotlarƒ±nda doƒürudan kullanƒ±lamaz (onun i√ßin: @singledispatchmethod vardƒ±r)
# - Performans kritik yerlerde uygun deƒüildir √ß√ºnk√º arka planda t√ºr aramasƒ± yapƒ±lƒ±r.

# -------------------------------------
# üß† Ekstra Bilgi:
# - MRO: dispatch i≈ülemi sƒ±rasƒ±nda, Python sƒ±nƒ±fƒ±nƒ±n Method Resolution Order'ƒ± (MRO) g√∂z √∂n√ºnde bulundurulur.
#   Bu, kalƒ±tƒ±m yapƒ±sƒ±nda en uygun e≈üle≈ümeyi bulur.

# üì¶ Temsili @singledispatch decorator mimarisi
class SingleDispatchFunction:
    def __init__(self, default_func):
        # üéØ Varsayƒ±lan fonksiyon (type fallback)
        self.default_func = default_func
        self.registry = {}  # üóÉÔ∏è Tip -> Fonksiyon e≈ülemesi

    def register(self, typ):
        # üß© Yeni bir tip i√ßin √∂zel fonksiyon kaydeder
        def wrapper(func):
            self.registry[typ] = func
            return func
        return wrapper

    def dispatch(self, typ):
        # üîç ƒ∞lgili tip i√ßin hangi fonksiyonun √ßaƒürƒ±lacaƒüƒ±nƒ± verir
        return self.registry.get(typ, self.default_func)

    def __call__(self, arg, *args, **kwargs):
        # üöÄ √áaƒüƒ±rƒ±lƒ±nca: tip‚Äôe g√∂re uygun fonksiyon √ßalƒ±≈ütƒ±rƒ±lƒ±r
        fn = self.dispatch(type(arg))
        return fn(arg, *args, **kwargs)

# üé® Kullanƒ±m (real-life usage gibi)
@SingleDispatchFunction
def describe(x):
    return f"Generic: {type(x).__name__}"

@describe.register(int)
def _(x):
    return f"Tam sayƒ±: {x}"

@describe.register(str)
def _(x):
    return f"Metin: {x}"

# üé¨ Deneme
print(describe(42))         # ‚ûú Tam sayƒ±: 42
print(describe("merhaba"))  # ‚ûú Metin: merhaba
print(describe(3.14))       # ‚ûú Generic: float



from functools import singledispatch

# üåü 1. Adƒ±m: Generic bir fonksiyon tanƒ±mlanƒ±yor
@singledispatch
def describe(obj):
    """Verilen objenin tipine g√∂re a√ßƒ±klama d√∂nd√ºr√ºr"""
    return f"Genel nesne: {type(obj).__name__}"

# üåü 2. Adƒ±m: Belirli t√ºrler i√ßin √∂zel fonksiyonlar kaydediliyor
@describe.register(int)
def _(obj):
    return f"Tam sayƒ±: {obj}, karesi: {obj ** 2}"

@describe.register(str)
def _(obj):
    return f"Metin: '{obj}', uzunluƒüu: {len(obj)} karakter"

@describe.register(list)
def _(obj):
    return f"Liste: {len(obj)} √∂ƒüe i√ßeriyor, ilk √∂ƒüe: {obj[0] if obj else 'Bo≈ü'}"

# üåü 3. Adƒ±m: Kullanƒ±m
print(describe(5))          # int
print(describe("merhaba"))  # str
print(describe([1, 2, 3]))   # list
print(describe(3.14))       # float ‚Üí default function

# üåü 4. Adƒ±m: dispatcher metadata kullanƒ±mƒ±
print("\n--- METADATA ---")
print("Registered Types:", list(describe.registry.keys()))  # ‚û§ kayƒ±tlƒ± t√ºrler
print("float i√ßin fonksiyon:", describe.dispatch(float))    # ‚û§ dispatch sonucu
print("Original func:", describe.__wrapped__)               # ‚û§ orijinal fonksiyon
print("Docstring:", describe.__doc__)                       # ‚û§ dok√ºmantasyon



@singledispatch
def duzle(obj):
    """duzler i≈üte."""
    return (f"Bilinmeyen t√ºr -> {obj.__repr__()}",).__iter__()

@duzle.register(tuple)
def _(obj):
    for i in obj:
        if isinstance(i,tuple):
            yield from _(i)
        else:
            yield i

@duzle.register(list)
def _(obj):
    for i in obj:
        if isinstance(i,list):
            yield from _(i)
        else:
            yield i

gen= duzle("a")

for i in gen:
    print(i)

print(duzle.__doc__) # doƒürudan -> __wrapped__ fonksiyonun __doc__'unu d√∂nd√ºr√ºr.

class Mydispatch:
    def __init__(self, func):
        self.func = func
        self.registry = {}

    def register(self,*types):
        @functools.wraps(self.func)
        def wrapper(new_func):
            self.registry[types] = new_func
            print(self.registry)
        return wrapper

    def dispatch(self,*types):
            if any(type(_type) is self.registry for _type in types):
                return self.registry.get(types)
            return self.func

    def __call__(self,types:tuple= None , *args, **kwargs):
        fonk = self.dispatch(types)
        return fonk(*args, **kwargs)

@Mydispatch
def main():
    return "nope."

@main.register(int,str)
def _():
    return "ok"

print(main((1,"d")))