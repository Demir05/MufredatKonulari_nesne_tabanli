# ðŸ“Œ Python'da SÄ±nÄ±f TabanlÄ± Decorator KullanÄ±mÄ±
from jedi.inference.gradual.typing import Callable


# Bir sÄ±nÄ±fÄ± decorator olarak kullanmak mÃ¼mkÃ¼ndÃ¼r.
# Bunun iÃ§in __init__ ve __call__ metodlarÄ±nÄ±n tanÄ±mlÄ± olmasÄ± gerekir.

# ---------------------------------------------------------
# NEDEN __init__ GEREKLÄ°?
# Ã‡Ã¼nkÃ¼ Python, decorator'Ä± ÅŸu ÅŸekilde Ã§aÄŸÄ±rÄ±r:
#   @MyDecorator
#   def f(): ...
#   => f = MyDecorator(f)
# Burada decoratorâ€™a gelen argÃ¼man (fonksiyon) __init__ ile alÄ±nÄ±r.

# ---------------------------------------------------------
# NEDEN __call__ GEREKLÄ°?
# f() Ã§aÄŸrÄ±ldÄ±ÄŸÄ±nda aslÄ±nda ÅŸu olur:
# MyDecorator(f)()  --> yani sÄ±nÄ±f Ã¶rneÄŸi () ile Ã§aÄŸrÄ±lÄ±r
# EÄŸer __call__ tanÄ±mlÄ± deÄŸilse => TypeError oluÅŸur
# Bu yÃ¼zden sÄ±nÄ±fÄ±n __call__ metodu olmalÄ± ki fonksiyon gibi Ã§aÄŸrÄ±labilsin.

# ---------------------------------------------------------
# SINIFIN DEKORATOR OLARAK AVANTAJLARI:
# - state (durum) tutabilir
# - birden fazla metot barÄ±ndÄ±rabilir
# - konfigÃ¼rasyon ve esnek kullanÄ±m saÄŸlar
# - kodu organize etmek iÃ§in daha profesyonel bir yapÄ±dÄ±r

# ---------------------------------------------------------
# Ã–ZET:

# âœ” SÄ±nÄ±f tabanlÄ± decorator kullanmak:
#   - init ile fonksiyonu yakalar
#   - call ile Ã§aÄŸrÄ±labilir hale getirir
#   - durum saklama (stateful) saÄŸlar
#   - geliÅŸmiÅŸ loglama, zamanlama, eriÅŸim kontrolÃ¼ gibi sistemler kurmaya olanak verir

# ---------------------------------------------------------
# Ã–RNEK: SÄ±nÄ±f decorator

class Zamanlayici:
    def __init__(self, func):
        self.func = func  # decorator iÃ§ine gÃ¶nderilen fonksiyonu sakla

    def __call__(self, *args, **kwargs): # __call__, wrapper gibi Ã§alÄ±ÅŸtÄ±ÄŸÄ±ndan dolayÄ± ek bir fonksiyon tanÄ±mlanmamÄ±ÅŸtÄ±r
        import time
        start = time.time()
        result = self.func(*args, **kwargs)
        end = time.time()
        print(f"Fonksiyon {self.func.__name__} {end - start:.2f} sn sÃ¼rdÃ¼.")
        return result

# Fonksiyonumuzu sÄ±nÄ±f ile sÃ¼sleyelim
@Zamanlayici
def uzun_islem():
    from time import sleep
    sleep(1)
    print("Ä°ÅŸlem tamam!")

uzun_islem()  # Ã‡alÄ±ÅŸtÄ±ÄŸÄ±nda Zamanlayici sÄ±nÄ±fÄ± tarafÄ±ndan sarÄ±lÄ±r ve zaman Ã¶lÃ§er

# ---------------------------------------------------------------------
# Ã–RNEK: Ã‡Ã–ZÃœMLEME

# Bir sÄ±nÄ±f decorator olarak tanÄ±mlanÄ±yor
class MyDecorator:
    # 1. AdÄ±m: @MyDecorator satÄ±rÄ± Ã§alÄ±ÅŸtÄ±ÄŸÄ±nda __init__ devreye girer
    def __init__(self, func):
        print(">>> __init__ Ã§aÄŸrÄ±ldÄ±")  # Fonksiyon, decorator sÄ±nÄ±fÄ±na aktarÄ±lÄ±r
        self.func = func

    # 3. AdÄ±m: Fonksiyon Ã§aÄŸrÄ±ldÄ±ÄŸÄ±nda __call__ Ã§alÄ±ÅŸÄ±r
    def __call__(self, *args, **kwargs): # __call__, wrapper gÃ¶revini Ã¼stlenir
        print(">>> __call__ Ã§aÄŸrÄ±ldÄ±")  # SÃ¼slenmiÅŸ fonksiyon Ã§aÄŸrÄ±lÄ±yor
        print(">>> Fonksiyon Ã§alÄ±ÅŸmadan Ã¶nce")  # Ã‡aÄŸrÄ± Ã¶ncesi iÅŸlemler
        result = self.func(*args, **kwargs)     # Orijinal fonksiyon Ã§alÄ±ÅŸtÄ±rÄ±lÄ±r
        print(">>> Fonksiyon Ã§alÄ±ÅŸtÄ±ktan sonra")  # Ã‡aÄŸrÄ± sonrasÄ± iÅŸlemler
        return result # return, normal decorator kullanÄ±mÄ±dÄ±r

# 2. AdÄ±m: Bu satÄ±r Ã§alÄ±ÅŸÄ±nca => selamla = MyDecorator(selamla)
@MyDecorator
def selamla():
    print("Merhaba!")

# 4. AdÄ±m: selamla() Ã§aÄŸrÄ±ldÄ±ÄŸÄ±nda aslÄ±nda MyDecorator.__call__() Ã§alÄ±ÅŸÄ±r
selamla()

#--------------------------------------------
# Ã–ZET:

# 1. Python, @decorator ifadesini gÃ¶rÃ¼r.

# 2. Bu ifade ÅŸu anlama gelir:
#    sÃ¼slenen_fonksiyon = DecoratorSÄ±nÄ±fÄ±(sÃ¼slenen_fonksiyon)

# 3. Bu iÅŸlem gerÃ§ekleÅŸtiÄŸinde, decorator sÄ±nÄ±fÄ±nÄ±n __init__ metodu Ã§alÄ±ÅŸÄ±r.
#    Yani, sÃ¼slenen fonksiyon nesnesi sÄ±nÄ±fa argÃ¼man olarak gÃ¶nderilir.
#    __init__, ile bu argÃ¼manÄ± alÄ±rÄ±z ve saklarÄ±z

# 4. Decorator sÄ±nÄ±fÄ±nÄ±n bir Ã¶rneÄŸi (instance) oluÅŸur ve bu Ã¶rnek artÄ±k sÃ¼slenen fonksiyonun yerini alÄ±r.

# 5. Program ilerleyip sÃ¼slenen fonksiyon Ã§aÄŸrÄ±ldÄ±ÄŸÄ±nda (Ã¶rneÄŸin: sÃ¼slenen_fonksiyon()),
#    aslÄ±nda sÄ±nÄ±fÄ±n __call__ metodu tetiklenmiÅŸ olur.

# 6. __call__ metodunun iÃ§inde istersek fonksiyonu Ã§aÄŸÄ±rmadan Ã¶nce/sonra iÅŸlemler yapabiliriz,
#    ve en sonunda orijinal fonksiyonu Ã§alÄ±ÅŸtÄ±rabiliriz (veya hiÃ§ Ã§alÄ±ÅŸtÄ±rmayabiliriz).

# 7. EÄŸer decorator sÄ±nÄ±fÄ± iÃ§inde @staticmethod veya @classmethod tanÄ±mlanmÄ±ÅŸsa,
#    bunlar sÄ±nÄ±fÄ±n iÃ§ iÅŸlevleri olarak Ã§aÄŸrÄ±labilir ama decorator mekanizmasÄ±nÄ±n temel akÄ±ÅŸÄ±nÄ± etkilemezler.


class Logger:
    def __init__(self, func:Callable):
        self._func = func
        self.count = 0
    def __call__(self, *args, **kwargs):
        self.count += 1
        print(f"{self.__str__()}")
        return self._func(*args, **kwargs)
    def __str__(self):
        return f" Benim adÄ±m >>> {self._func.__name__} VE Benim deÄŸerim >>> {self.count}"

@Logger
def hello(*args, **kwargs):
    print("Hello World!")

@Logger
def hello2(*args, **kwargs):
    print("Hello World 2!")

hello()
hello2()
hello()
hello2()
"""
 Benim adÄ±m >>> hello VE Benim deÄŸerim >>> 1
Hello World!
 Benim adÄ±m >>> hello2 VE Benim deÄŸerim >>> 1
Hello World 2!
 Benim adÄ±m >>> hello VE Benim deÄŸerim >>> 2
Hello World!
 Benim adÄ±m >>> hello2 VE Benim deÄŸerim >>> 2
Hello World 2!

"""



